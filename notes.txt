Directives - HTML annotations that trigger javascript behaviors
Modules - where our application components live
Expressions - how values get displayed on a page
Controllers - where we add application behavior

Wrap our javascript app in a closure - good habit.

More directives
~ ng-app
~ ng-controller
~ ng-show
~ ng-hide
~ ng-repeat

Pipe | take the output of an expression and pipe it into the filter

Recipe: {{ data | filter:options}}

Filters: date, lowercase, uppercase, limitTo, orderBy

ng-src directive - example: <img ng-src="{{product.images[0]}.full}}" - if we had
just used src, the browser would have tried to load the image before the expression
was evaluated.

ng-click directive - used with tabs, takes an expression to evaluate, e.g.
ng-click="tab = 1"

<section>
  <ul class="nav nav-pills">
    <li><a href ng-click="tab = 1">Description</a></li>
    <li><a href ng-click="tab = 2">Specifications</a></li>
    <li><a href ng-click="tab = 3">Reviews</a></li
  </ul>
  {{tab}}

When ng-click changes the value of tab, the {{tab}} expression automatically
gets updated
==> This is two-way data binding

Expressions are re-evaluated when properties change.

ng-init - Evaluate an expression in the current scope

ng-class="{active:tab === 1}"
{ name of class to set: expression to evaluate}

expression true - append class to element

ng-model - bind form element value to the property

~ Can used with checkboxes and radio buttons

ng-submit - call a function when a form is submitted.

Validations

* Turn off default html validations using novalidate in the form tag
* Mark required fields
* Debug code <div>reviewForm is {{reviewForm.$valid}} </div>, valid is a built in property.
* Use the build in property to prevent submitting an invalid form

ng-input classes
* ng-pristine, ng-dirty, ng-invalid, ng-valid

Angular can also validate urls and numbers (numbers can have a min and max)

Custom Directives

How do we eliminate duplicate code? Pull out html snippets into a separate
html file, then ng-include the file (file name between singlequotes).

But.. directives go farther than this.

Directives allow you to write HTML that expresses the behavior of your app.
~ template expanding directives
~ can also express complex UIs, calling events and registering event handlers,
reusing common components.

Element directives - don't use self closing tag as some browsers do not like
them for custom elements.

Common convention is to use element directives for ui widgets, and attribute
directives for mixing in behavior.

Use restrict: 'A' for attribute directives

Start with: Directive Controllers
